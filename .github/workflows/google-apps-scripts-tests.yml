name: Google Apps Scripts Tests


# Prevent duplicate runs for the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
on:
  push:
    branches: [ main ]
    paths:
      - 'GoogleAppsScripts/**'
      - '.github/workflows/google-apps-scripts-tests.yml'
  workflow_dispatch:

jobs:
  test-google-apps-scripts:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-node@v4
      with:
        node-version: '18.20.8'

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python (for JSON validation)
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up Node.js (for GoogleAppsScript testing)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Make test scripts executable
      run: |
        cd GoogleAppsScripts
        chmod +x tests/*.sh
        chmod +x projects/*/tests/*.sh

    - name: Run Clasp Helpers Tests
      continue-on-error: true
      run: |
        cd GoogleAppsScripts
        ./tests/test_clasp_helpers.sh

    # Project-specific tests moved to their own directories
    - name: Run Product Creation Function Tests
      run: |
        cd GoogleAppsScripts/projects/create-products-from-registration-info/tests
        node run_consolidated_tests.js

    - name: Run Process Refunds Exchanges Tests
      continue-on-error: true
      run: |
        cd GoogleAppsScripts
        ./projects/process-refunds-exchanges/tests/run_tests.sh

    - name: Run Leadership Discount Codes Tests
      continue-on-error: true
      run: |
        cd GoogleAppsScripts
        ./projects/leadership-discount-codes/tests/test_leadership_discount_codes.sh

    - name: Run Instructions Tests
      run: |
        cd GoogleAppsScripts
        ./tests/test_instructions.sh

    - name: Validate Google Apps Script manifests
      run: |
        cd GoogleAppsScripts
        echo "🔍 Validating appsscript.json files..."
        find . -name "appsscript.json" -exec python3 -m json.tool {} \; > /dev/null
        echo "✅ All appsscript.json files are valid JSON"

    - name: Check for hardcoded secrets
      run: |
        cd GoogleAppsScripts
        echo "🔍 Checking for hardcoded secrets..."
        if grep -r "shpat_\|xoxb-\|https://hooks.slack.com" --include="*.gs" . | grep -v "shared-utilities/secretsUtils.gs" | grep -v "instructions.gs"; then
          echo "❌ Found hardcoded secrets in scripts!"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi

    - name: Test Summary
      if: always()
      run: |
        echo "📊 Google Apps Scripts Test Summary Complete"
        echo "🚀 All scripts are ready for deployment!"
