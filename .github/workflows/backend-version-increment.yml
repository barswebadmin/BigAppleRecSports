name: Backend Version Management

on:
  push:
    branches: [ main ]  # Only trigger on main branch (merges/deploys)
    paths:
      - '.github/workflows/backend-version-increment.yml'
      - 'backend/**'
      - '!backend/version.py'
      - '!backend/CHANGELOG.md'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/backend-version-increment.yml'
      - 'backend/**'
      - '!backend/version.py'
      - '!backend/CHANGELOG.md'
  workflow_dispatch:

# Prevent duplicate runs: cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  update-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install backend dependencies
      run: |
        echo "üì¶ Installing backend dependencies..."
        cd backend
        pip install -r requirements.txt

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Check if this is a merge commit
      id: check_merge
      run: |
        # Check if this is a merge commit (has 2+ parents)
        PARENT_COUNT=$(git rev-list --parents -n 1 HEAD | awk '{print NF-1}')
        if [ $PARENT_COUNT -gt 1 ]; then
          echo "is_merge=true" >> $GITHUB_OUTPUT
          echo "üìù This is a merge commit - will update version"
        else
          echo "is_merge=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  This is a regular commit - skipping version update"
        fi

    - name: Run Backend Version Manager
      if: steps.check_merge.outputs.is_merge == 'true'
      run: |
        echo "üîç Analyzing backend changes for version update..."
        python3 scripts/backend_version_manager.py || true
      env:
        SHOPIFY_STORE: test-store.myshopify.com
        SHOPIFY_TOKEN: test_token
        ENVIRONMENT: test

    - name: Check for version updates
      if: steps.check_merge.outputs.is_merge == 'true'
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain backend/version.py backend/CHANGELOG.md) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üìù Version or changelog updated"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  No version changes needed"
        fi

    - name: Commit version updates
      if: steps.check_merge.outputs.is_merge == 'true' && steps.check_changes.outputs.changes == 'true'
      run: |
        git add backend/version.py backend/CHANGELOG.md
        git commit -m "chore: auto-update backend version and changelog [skip ci]"

    - name: Push version updates
      if: steps.check_merge.outputs.is_merge == 'true' && steps.check_changes.outputs.changes == 'true'
      run: |
        git push origin main

    - name: Skip version update
      if: steps.check_merge.outputs.is_merge == 'false'
      run: |
        echo "‚è≠Ô∏è  Skipping version update - not a merge commit"
        echo "   Version updates only happen on merges to main branch"

  validate-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install backend dependencies
      run: |
        echo "üì¶ Installing backend dependencies..."
        cd backend
        pip install -r requirements.txt

    - name: Validate version file
      run: |
        echo "üîç Validating backend version file..."
        if [ -f "backend/version.py" ]; then
          cd backend
          python3 -c "import sys; from version import get_version_info; info = get_version_info(); print('‚úÖ Version validation successful'); print(f'   Version: {info[\"version\"]}'); print(f'   Build: {info[\"build\"]}'); print(f'   Full: {info[\"full_version\"]}'); print(f'   Updated: {info[\"last_updated\"]}'); print(f'   Codename: {info[\"codename\"]}')"
        else
          echo "‚ùå Version file not found"
          exit 1
        fi

    - name: Validate changelog format
      run: |
        echo "üìù Validating changelog format..."
        if [ -f "backend/CHANGELOG.md" ]; then
          if grep -q "# Changelog" backend/CHANGELOG.md; then
            echo "‚úÖ Changelog format valid"
          else
            echo "‚ùå Changelog missing header"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  Changelog file not found (will be created)"
        fi

    - name: Test version integration
      run: |
        echo "üß™ Testing version integration with FastAPI..."
        cd backend
        python3 -c "import sys; from version import get_version_info; from main import app; info = get_version_info(); assert 'version' in info; assert 'build' in info; assert 'full_version' in info; print('‚úÖ Version integration tests passed'); print(f'   FastAPI app version: {app.version}'); print(f'   Version module: {info[\"version\"]}')"
      env:
        SHOPIFY_STORE: test-store.myshopify.com
        SHOPIFY_TOKEN: test_token
        ENVIRONMENT: test

    - name: Preview version changes
      run: |
        echo "üîç Preview of version changes that would happen on merge:"
        echo "========================================================"
        # Create a temporary staged commit to analyze
        git add backend/ || true
        python3 scripts/backend_version_manager.py || echo "No changes to analyze"
      env:
        SHOPIFY_STORE: test-store.myshopify.com
        SHOPIFY_TOKEN: test_token
        ENVIRONMENT: test
