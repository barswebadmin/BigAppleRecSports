import requests
import json
from typing import Dict, Any, Optional, List
import logging
from datetime import datetime
from config import settings
from utils.date_utils import format_date_and_time

logger = logging.getLogger(__name__)

class SlackService:
    def __init__(self):
        # Slack configuration - dynamic based on environment (like Google Apps Script MODE)
        is_production = settings.environment == "production"
        
        self.refunds_channel = {
            "name": "#refunds" if is_production else "#joe-test",
            "channel_id": "C08J1EN7SFR" if is_production else "C092RU7R6PL",
            "bearer_token": settings.slack_refunds_bot_token or ""
        }
        
        # Sport-specific team mentions
        self.sport_groups = {
            "kickball": "<!subteam^S08L2521XAM>",
            "bowling": "<!subteam^S08KJJ02738>", 
            "pickleball": "<!subteam^S08KTJ33Z9R>",
            "dodgeball": "<!subteam^S08KJJ5CL4W>"
        }
    
    # ========================================================================
    # UTILITY METHODS
    # ========================================================================
    
    def get_sport_group_mention(self, product_title: str) -> str:
        """Get the appropriate Slack group mention based on product title"""
        title_lower = product_title.lower()
        
        for sport, group_id in self.sport_groups.items():
            if sport in title_lower:
                return group_id
        
        return "@here"  # fallback
    
    def get_order_url(self, order_id: str, order_name: str) -> str:
        """Create Shopify admin order URL for Slack"""
        order_id_digits = order_id.split('/')[-1] if '/' in order_id else order_id
        normalized_order_name = order_name if order_name.startswith('#') else f"#{order_name}"
        return f"<https://admin.shopify.com/store/09fe59-3/orders/{order_id_digits}|{normalized_order_name}>"
    
    def get_product_url(self, product_id: str) -> str:
        """Create Shopify admin product URL"""
        product_id_digits = product_id.split('/')[-1] if '/' in product_id else product_id
        return f"https://admin.shopify.com/store/09fe59-3/products/{product_id_digits}"
    
    def _get_request_type_text(self, refund_type: str) -> str:
        """Get formatted request type text"""
        return "üíµ Refund back to original form of payment" if refund_type == "refund" else "üéüÔ∏è Store Credit to use toward a future order"
    
    def _get_optional_request_notes(self, request_notes: str) -> str:
        """Get formatted optional request notes"""
        return f"*Notes provided by requestor*: {request_notes}\n\n" if request_notes else ""
    
    def _get_requestor_line(self, requestor_name: Dict[str, str], requestor_email: str) -> str:
        """Get formatted requestor line"""
        return f"üìß *Requested by:* {requestor_name['first']} {requestor_name['last']} ({requestor_email})\n\n"
    
    def _get_sheet_link_line(self, sheet_link: Optional[str]) -> str:
        """Get formatted sheet link line"""
        if sheet_link:
            return f"\n \n üîó *<{sheet_link}|View Request in Google Sheets>*\n\n"
        return ""
    
    def _create_standard_blocks(self, text: str, include_actions: bool = False, 
                               action_buttons: Optional[List[Dict[str, Any]]] = None) -> List[Dict[str, Any]]:
        """Create standard Slack message blocks"""
        blocks = [
            {"type": "divider"},
            {
                "type": "section",
                "text": {"type": "mrkdwn", "text": text}
            }
        ]
        
        if include_actions and action_buttons:
            # Remove any None buttons and ensure we have a valid list
            filtered_buttons = [btn for btn in action_buttons if btn is not None]
            if filtered_buttons:  # Only add actions if we have valid buttons
                blocks.append({
                    "type": "actions",
                    "elements": filtered_buttons
                })
        
        blocks.append({"type": "divider"})
        return blocks
    
    # ========================================================================
    # MAIN NOTIFICATION METHODS
    # ========================================================================
    
    # def send_refund_notification(self, order_data: Dict[str, Any], refund_data: Dict[str, Any], 
    #                            sheet_link: Optional[str] = None, user_name: str = "API") -> Dict[str, Any]:
    #     """
    #     Send a refund completion notification to Slack
    #     Based on the approveRefundRequest function from the original script
    #     """
    #     try:
    #         order = order_data["order"]
    #         product = order["product"]
    #         customer = order["customer"]
            
    #         # Extract season info if available
    #         season_start_date = "Unknown"
    #         if "refund_calculation" in order_data and order_data["refund_calculation"].get("season_start_date"):
    #             season_start_date = order_data["refund_calculation"]["season_start_date"]
            
    #         # Build inventory text
    #         inventory_text = self._build_inventory_text(order_data, product["title"], season_start_date)
            
    #         # Create Slack message blocks
    #         refund_type = refund_data.get("refund_type", "refund")
    #         refund_amount = refund_data.get("refund_amount", 0)
            
    #         order_url = self.get_order_url(order["orderId"], order["orderName"])
            
    #         # Main message text
    #         main_text = f"‚úÖ *Request to provide a ${refund_amount:.2f} {refund_type} for Order {order_url} for {customer.get('email', 'Unknown')} has been processed by {user_name}*"
            
    #         if sheet_link:
    #             main_text += f"\nüîó *<{sheet_link}|View Request in Google Sheets>*"
            
    #         main_text += f"\n{inventory_text}"
            
    #         # Create message blocks
    #         blocks = self._create_standard_blocks(main_text)
            
    #         # Send to Slack
    #         result = self._send_slack_message(
    #             channel_id=self.refunds_channel["channel_id"],
    #             text=f"‚úÖ Refund processed for {order['orderName']}",
    #             blocks=blocks
    #         )
            
    #         return result
            
    #     except Exception as e:
    #         logger.error(f"Error sending refund notification to Slack: {str(e)}")
    #         return {"success": False, "error": str(e)}
    
    def send_refund_request_notification(self, order_data: Optional[Dict[str, Any]] = None, 
                                       refund_calculation: Optional[Dict[str, Any]] = None,
                                       requestor_info: Optional[Dict[str, Any]] = None, 
                                       sheet_link: Optional[str] = None,
                                       error_type: Optional[str] = None,
                                       raw_order_number: Optional[str] = None,
                                       order_customer_email: Optional[str] = None) -> Dict[str, Any]:
        """
        Unified method to send refund request notifications to Slack
        Handles success, fallback, and error scenarios dynamically
        
        Args:
            order_data: Order information from Shopify
            refund_calculation: Refund calculation results
            requestor_info: Requestor details (name, email, refund_type, notes)
            sheet_link: Link to Google Sheets
            error_type: Type of error ('order_not_found', 'email_mismatch', or None for success/fallback)
            raw_order_number: Raw order number for error cases
            order_customer_email: Customer email from order for mismatch errors
        """
        try:
            # Validate required requestor info
            if not requestor_info:
                return {"success": False, "error": "Missing requestor information"}
            
            requestor_name = requestor_info["name"]
            requestor_email = requestor_info["email"]
            refund_type = requestor_info["refund_type"]
            request_notes = requestor_info["notes"]
            
            # Handle error cases
            if error_type == "order_not_found":
                return self._build_error_message(
                    "order_not_found", requestor_name, requestor_email, refund_type, 
                    request_notes, sheet_link, raw_order_number=raw_order_number
                )
            
            if error_type == "email_mismatch":
                return self._build_error_message(
                    "email_mismatch", requestor_name, requestor_email, refund_type, 
                    request_notes, sheet_link, order_data=order_data, 
                    order_customer_email=order_customer_email
                )
            
            # Handle success and fallback cases
            if not order_data:
                return {"success": False, "error": "Missing order data for success/fallback message"}
            
            logger.info(f"üîç Slack service received order_data: {json.dumps(order_data, indent=2)}")
            
            order = order_data["order"]
            product = order["product"]
            
            # Determine if this is a fallback case (refund calculation failed)
            is_fallback = not refund_calculation or not refund_calculation.get("success")
            
            if is_fallback:
                logger.warning(f"Refund calculation failed for order {order['orderName']}: {refund_calculation.get('message', 'Unknown error') if refund_calculation else 'No calculation provided'}")
                
                # Calculate fallback refund amount (90% for refund, 95% for credit)
                total_paid = order.get("totalAmountPaid", 0)
                fallback_refund_amount = total_paid * 0.9 if refund_type == "refund" else total_paid * 0.95
                
                return self._build_refund_request_message(
                    order, product, requestor_name, requestor_email, refund_type, 
                    request_notes, sheet_link, is_fallback=True, 
                    fallback_refund_amount=fallback_refund_amount, total_paid=total_paid
                )
            else:
                # Success case with proper refund calculation
                return self._build_refund_request_message(
                    order, product, requestor_name, requestor_email, refund_type, 
                    request_notes, sheet_link, is_fallback=False, 
                    refund_calculation=refund_calculation
                )
            
        except Exception as e:
            logger.error(f"Error sending refund request notification to Slack: {str(e)}")
            return {"success": False, "error": str(e)}
    
    # def send_error_notification(self, error_message: str, order_number: Optional[str] = None, 
    #                           context: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    #     """Send error notifications to Slack"""
    #     try:
    #         text = f"‚ùå **BARS API Error**\n"
    #         if order_number:
    #             text += f"**Order:** {order_number}\n"
    #         text += f"**Error:** {error_message}"
            
    #         if context:
    #             text += f"\n**Context:** ```{json.dumps(context, indent=2)}```"
            
    #         blocks = self._create_standard_blocks(text)
            
    #         result = self._send_slack_message(
    #             channel_id=self.refunds_channel["channel_id"],
    #             text=f"‚ùå API Error{f' - Order {order_number}' if order_number else ''}",
    #             blocks=blocks
    #         )
            
    #         return result
            
    #     except Exception as e:
    #         logger.error(f"Error sending error notification to Slack: {str(e)}")
    #         return {"success": False, "error": str(e)}

    # ========================================================================
    # PRIVATE HELPER METHODS
    # ========================================================================
    
    def _build_error_message(self, error_type: str, requestor_name: Dict[str, str], 
                           requestor_email: str, refund_type: str, request_notes: str,
                           sheet_link: Optional[str], raw_order_number: Optional[str] = None,
                           order_data: Optional[Dict[str, Any]] = None,
                           order_customer_email: Optional[str] = None) -> Dict[str, Any]:
        """Build error message for order not found or email mismatch scenarios"""
        
        # Validate error type
        if error_type not in ["order_not_found", "email_mismatch"]:
            return {"success": False, "error": f"Unknown error type: {error_type}"}
        
        # Validate required data for email mismatch
        if error_type == "email_mismatch" and not order_data:
            return {"success": False, "error": "Missing order data for email mismatch error"}
        
        current_time = format_date_and_time(datetime.now())

        # Build unified error message
        error_text = "‚ùå *Error with Refund Request - "
        error_text += "Order Not Found in Shopify*" if error_type == "order_not_found" else "Email provided did not match order*"
        error_text += f"\n\n*Request Type*: {self._get_request_type_text(refund_type)}\n\n"
        error_text += f"*Request Submitted At*: {current_time}\n\n"
        error_text += self._get_requestor_line(requestor_name, requestor_email)
        
        # Add email mismatch specific details
        if error_type == "email_mismatch":
            # We already validated order_data is not None above
            assert order_data is not None
            error_text += f"*Email Associated with Order:* {order_customer_email}\n\n"
            order = order_data["order"]
            order_url = self.get_order_url(order["orderId"], order["orderName"])
            error_text += f"*Order Number:* {order_url}\n\n"
        else:
            # Order not found specific details
            error_text += f"üîé *Order Number Provided:* {raw_order_number} - this order cannot be found in Shopify\n\n"
        
        # Add common closing elements
        error_text += self._get_optional_request_notes(request_notes)
        error_text += f"üì© *The requestor has been emailed to please provide correct order info. No action needed at this time.*\n"
        error_text += self._get_sheet_link_line(sheet_link)
        
        # Add sport mention for email mismatch (has product info)
        if error_type == "email_mismatch" and order_data:
            product = order_data["order"]["product"]
            sport_mention = self.get_sport_group_mention(product["title"])
            error_text += f"*Attn*: {sport_mention}"
        
        slack_text = "‚ùå *Refund Request Submitted with Error*"
        
        blocks = self._create_standard_blocks(error_text)
        
        return self._send_slack_message(
            channel_id=self.refunds_channel["channel_id"],
            text=slack_text,
            blocks=blocks
        )
    
    def _build_refund_request_message(self, order: Dict[str, Any], product: Dict[str, Any],
                                    requestor_name: Dict[str, str], requestor_email: str,
                                    refund_type: str, request_notes: str, sheet_link: Optional[str],
                                    is_fallback: bool = False, refund_calculation: Optional[Dict[str, Any]] = None,
                                    fallback_refund_amount: Optional[float] = None,
                                    total_paid: Optional[float] = None) -> Dict[str, Any]:
        """Build refund request message for both success and fallback scenarios"""
        
        # Common elements
        current_time = format_date_and_time(datetime.now())
        order_created_time = format_date_and_time(order.get("orderCreatedAt", datetime.now()))
        order_url = self.get_order_url(order["orderId"], order["orderName"])
        product_url = self.get_product_url(product["productId"])
        sport_mention = self.get_sport_group_mention(product["title"])
        
        # Header
        header_text = "üìå *New Refund Request!*\n\n"
        
        # Build message text
        message_text = f"{header_text}"
        
        # Add fallback warning if needed
        if is_fallback:
            message_text += f"‚ö†Ô∏è *Order Found in Shopify but Missing Season Info (or Product Is Not a Regular Season)*\n\n"
        
        # Common request details
        message_text += f"*Request Type*: {self._get_request_type_text(refund_type)}\n\n"
        message_text += self._get_requestor_line(requestor_name, requestor_email)
        message_text += f"*Request Submitted At*: {current_time}\n\n"
        message_text += f"*Order Number{'Provided' if is_fallback else ''}*: {order_url}\n\n"
        message_text += f"*Order Created At:* {order_created_time}\n\n"
        
        # Product info
        if is_fallback:
            message_text += f"*Product Title*: {product['title']}\n\n"
        else:
            message_text += f"*Sport/Season/Day:* <{product_url}|{product['title']}>\n\n"
        
        # Refund calculation details and determine refund amount
        if is_fallback:
            total_paid_value = total_paid or 0.0
            message_text += f"*Total Paid:* ${total_paid_value:.2f}\n\n"
            message_text += f"‚ö†Ô∏è *Could not parse 'Season Dates' from this order's description (in order to calculate a refund amount).*\n\n"
            message_text += f"Please verify the product and either contact the requestor or process anyway.\n\n"
            refund_amount = fallback_refund_amount or 0.0
        else:
            # Success case with proper calculation
            if not refund_calculation:
                return {"success": False, "error": "Missing refund calculation for success case"}
            
            season_start_date = refund_calculation.get("season_start_date", "Unknown")
            refund_amount = refund_calculation.get("refund_amount", 0.0)
            refund_text = refund_calculation.get("refund_text", "")
            
            message_text += f"*Season Start Date*: {season_start_date}\n\n"
            message_text += f"*Total Paid:* ${order.get('totalAmountPaid', 0):.2f}\n\n"
            message_text += f"{refund_text}\n\n"
        
        # Add notes and sheet link
        message_text += self._get_optional_request_notes(request_notes)
        message_text += self._get_sheet_link_line(sheet_link)
        message_text += f"*Attn*: {sport_mention}"
        
        # Create action buttons
        action_buttons = [
            self._create_confirm_button(order["orderId"], order["orderName"], requestor_name, requestor_email, refund_type, refund_amount),
            self._create_refund_different_amount_button(order["orderId"], order["orderName"], requestor_name, requestor_email, refund_type, refund_amount),
            self._create_cancel_button(order["orderName"])
        ]
        
        blocks = self._create_standard_blocks(message_text, include_actions=True, action_buttons=action_buttons)
        
        # Determine slack text based on scenario
        if is_fallback:
            slack_text = "‚ö†Ô∏è *Refund Request Missing Season Info*"
        else:
            slack_text = header_text
        
        return self._send_slack_message(
            channel_id=self.refunds_channel["channel_id"],
            text=slack_text,
            blocks=blocks
        )

    def _build_inventory_text(self, order_data: Dict[str, Any], product_title: str, season_start_date: str) -> str:
        """Build the inventory status text for Slack messages"""
        try:
            inventory_summary = order_data.get("inventory_summary", {})
            
            if not inventory_summary.get("success"):
                return "üì¶ *Inventory information unavailable*"
            
            inventory_list = inventory_summary.get("inventory_list", {})
            inventory_order = ["veteran", "early", "open", "waitlist"]
            
            product_url = self.get_product_url(order_data["order"]["product"]["productId"])
            
            text = f"üì¶ *Season Start Date for <{product_url}|{product_title}> is {season_start_date}.*\n*Current Inventory:*\n"
            
            for key in inventory_order:
                if key in inventory_list and inventory_list[key].get("inventory") is not None:
                    variant_info = inventory_list[key]
                    inventory_count = variant_info.get("inventory", 0)
                    variant_name = variant_info.get("name", key.title())
                    
                    if isinstance(inventory_count, (int, float)):
                        inventory_text = f"{int(inventory_count)} spots available"
                    else:
                        inventory_text = "Error fetching current inventory"
                    
                    text += f"‚Ä¢ *{variant_name}*: {inventory_text}\n"
            
            return text.rstrip()
            
        except Exception as e:
            logger.error(f"Error building inventory text: {str(e)}")
            return "üì¶ *Error fetching inventory information*"

    def _create_confirm_button(self, order_id: str, order_name: str, requestor_name: Dict[str, str], 
                             requestor_email: str, refund_type: str, refund_amount: float) -> Dict[str, Any]:
        """Create the confirm/approve button matching Google Apps Script format"""
        formatted_amount = int(refund_amount) if refund_amount == int(refund_amount) else f"{refund_amount:.2f}"
        
        button_text = f"‚úÖ Process ${formatted_amount} Refund" if refund_type == "refund" else f"‚úÖ Issue ${formatted_amount} Store Credit"
        
        return {
            "type": "button",
            "text": {"type": "plain_text", "text": button_text},
            "action_id": "approve_refund",
            "value": f"rawOrderNumber={order_name}|orderId={order_id}|refundAmount={refund_amount}",
            "style": "primary",
            "confirm": {
                "title": {"type": "plain_text", "text": "Confirm Approval"},
                "text": {"type": "plain_text", "text": f"You are about to issue {requestor_name['first']} {requestor_name['last']} a {refund_type} for ${formatted_amount}. Proceed?"},
                "confirm": {"type": "plain_text", "text": "Yes, confirm"},
                "deny": {"type": "plain_text", "text": "Cancel"}
            }
        }
    
    def _create_refund_different_amount_button(self, order_id: str, order_name: str, requestor_name: Dict[str, str], 
                                             requestor_email: str, refund_type: str, refund_amount: float) -> Dict[str, Any]:
        """Create the custom amount button matching Google Apps Script format"""
        button_text = "‚úèÔ∏è Process custom Refund amt" if refund_type == "refund" else "‚úèÔ∏è Issue custom Store Credit amt"
        
        return {
            "type": "button",
            "text": {"type": "plain_text", "text": button_text},
            "action_id": "refund_different_amount",
            "value": f"orderId={order_id}|refundAmount={refund_amount}|rawOrderNumber={order_name}"
        }
    
    def _create_cancel_button(self, order_name: str) -> Dict[str, Any]:
        """Create the cancel button matching Google Apps Script format"""
        return {
            "type": "button",
            "text": {"type": "plain_text", "text": "‚ùå Cancel and Close Request"},
            "style": "danger",
            "action_id": "cancel_refund_request",
            "value": f"rawOrderNumber={order_name}",
            "confirm": {
                "title": {"type": "plain_text", "text": "Confirm Cancellation"},
                "text": {"type": "plain_text", "text": "Are you sure you want to cancel and close this request?"},
                "confirm": {"type": "plain_text", "text": "Yes, cancel and close it"},
                "deny": {"type": "plain_text", "text": "No, keep it"}
            }
        }

    def _send_slack_message(self, channel_id: str, text: str, blocks: Optional[List[Dict[str, Any]]] = None,
                          thread_ts: Optional[str] = None) -> Dict[str, Any]:
        """Send a message to Slack using the Web API"""
        try:
            url = "https://slack.com/api/chat.postMessage"
            
            payload: Dict[str, Any] = {
                "channel": channel_id,
                "text": text
            }
            
            if blocks:
                payload["blocks"] = blocks
            
            if thread_ts:
                payload["thread_ts"] = thread_ts
            
            headers = {
                "Authorization": f"Bearer {self.refunds_channel['bearer_token']}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            response_data = response.json()
            
            if response.status_code == 200 and response_data.get("ok"):
                logger.info(f"‚úÖ Slack message sent successfully to {channel_id}")
                return {
                    "success": True,
                    "ts": response_data.get("ts"),
                    "channel": response_data.get("channel")
                }
            else:
                error_msg = response_data.get("error", "Unknown Slack API error")
                logger.error(f"‚ùå Slack API error: {error_msg}")
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            logger.error(f"‚ùå Error sending Slack message: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def update_slack_message(self, channel_id: str, message_ts: str, text: str, 
                           blocks: Optional[List[Dict[str, Any]]] = None) -> Dict[str, Any]:
        """Update an existing Slack message"""
        try:
            url = "https://slack.com/api/chat.update"
            
            payload: Dict[str, Any] = {
                "channel": channel_id,
                "ts": message_ts,
                "text": text
            }
            
            if blocks:
                payload["blocks"] = blocks
            
            headers = {
                "Authorization": f"Bearer {self.refunds_channel['bearer_token']}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(url, headers=headers, json=payload, timeout=30)
            response_data = response.json()
            
            if response.status_code == 200 and response_data.get("ok"):
                logger.info(f"‚úÖ Slack message updated successfully")
                return {"success": True, "ts": response_data.get("ts")}
            else:
                error_msg = response_data.get("error", "Unknown Slack API error")
                logger.error(f"‚ùå Slack update error: {error_msg}")
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            logger.error(f"‚ùå Error updating Slack message: {str(e)}")
            return {"success": False, "error": str(e)} 